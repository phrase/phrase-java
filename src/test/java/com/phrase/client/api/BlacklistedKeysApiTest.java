/*
 * Phrase API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiException;
import com.phrase.client.model.BlacklistedKey;
import com.phrase.client.model.BlacklistedKeyCreateParameters;
import com.phrase.client.model.BlacklistedKeyUpdateParameters;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BlacklistedKeysApi
 */
@Ignore
public class BlacklistedKeysApiTest {

    private final BlacklistedKeysApi api = new BlacklistedKeysApi();

    
    /**
     * Create a blacklisted key
     *
     * Create a new rule for blacklisting keys.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blacklistedKeyCreateTest() throws ApiException {
        String projectId = null;
        BlacklistedKeyCreateParameters blacklistedKeyCreateParameters = null;
        String xPhraseAppOTP = null;
        BlacklistedKey response = api.blacklistedKeyCreate(projectId, blacklistedKeyCreateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Delete a blacklisted key
     *
     * Delete an existing rule for blacklisting keys.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blacklistedKeyDeleteTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        api.blacklistedKeyDelete(projectId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Get a single blacklisted key
     *
     * Get details on a single rule for blacklisting keys for a given project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blacklistedKeyShowTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        BlacklistedKey response = api.blacklistedKeyShow(projectId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Update a blacklisted key
     *
     * Update an existing rule for blacklisting keys.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blacklistedKeyUpdateTest() throws ApiException {
        String projectId = null;
        String id = null;
        BlacklistedKeyUpdateParameters blacklistedKeyUpdateParameters = null;
        String xPhraseAppOTP = null;
        BlacklistedKey response = api.blacklistedKeyUpdate(projectId, id, blacklistedKeyUpdateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * List blacklisted keys
     *
     * List all rules for blacklisting keys for the given project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blacklistedKeysListTest() throws ApiException {
        String projectId = null;
        String xPhraseAppOTP = null;
        Integer page = null;
        Integer perPage = null;
        String branch = null;
        List<BlacklistedKey> response = api.blacklistedKeysList(projectId, xPhraseAppOTP, page, perPage, branch);

        // TODO: test validations
    }
    
}

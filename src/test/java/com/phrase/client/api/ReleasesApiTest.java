/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiException;
import com.phrase.client.model.Release;
import com.phrase.client.model.ReleaseCreateParameters;
import com.phrase.client.model.ReleasePreview;
import com.phrase.client.model.ReleaseUpdateParameters;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReleasesApi
 */
@Ignore
public class ReleasesApiTest {

    private final ReleasesApi api = new ReleasesApi();

    
    /**
     * Create a release
     *
     * Create a new release.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseCreateTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        ReleaseCreateParameters releaseCreateParameters = null;
        String xPhraseAppOTP = null;
        Release response = api.releaseCreate(accountId, distributionId, releaseCreateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Delete a release
     *
     * Delete an existing release.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseDeleteTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String id = null;
        String xPhraseAppOTP = null;
        api.releaseDelete(accountId, distributionId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Publish a release
     *
     * Publish a release for production.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releasePublishTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String id = null;
        String xPhraseAppOTP = null;
        Release response = api.releasePublish(accountId, distributionId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Get a single release
     *
     * Get details on a single release.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseShowTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String id = null;
        String xPhraseAppOTP = null;
        Release response = api.releaseShow(accountId, distributionId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Update a release
     *
     * Update an existing release.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseUpdateTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String id = null;
        ReleaseUpdateParameters releaseUpdateParameters = null;
        String xPhraseAppOTP = null;
        Release response = api.releaseUpdate(accountId, distributionId, id, releaseUpdateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * List releases
     *
     * List all releases for the given distribution.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releasesListTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String xPhraseAppOTP = null;
        Integer page = null;
        Integer perPage = null;
        List<ReleasePreview> response = api.releasesList(accountId, distributionId, xPhraseAppOTP, page, perPage);

        // TODO: test validations
    }
    
}

/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiException;
import com.phrase.client.model.Member;
import com.phrase.client.model.MemberProjectDetail;
import com.phrase.client.model.MemberUpdateParameters;
import com.phrase.client.model.MemberUpdateSettingsParameters;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MembersApi
 */
@Ignore
public class MembersApiTest {

    private final MembersApi api = new MembersApi();

    
    /**
     * Remove a user from the account
     *
     * Remove a user from the account. The user will be removed from the account but not deleted from Phrase. Access token scope must include &lt;code&gt;team.manage&lt;/code&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberDeleteTest() throws ApiException {
        String accountId = null;
        String id = null;
        String xPhraseAppOTP = null;
        api.memberDelete(accountId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Get single member
     *
     * Get details on a single user in the account. Access token scope must include &lt;code&gt;team.manage&lt;/code&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberShowTest() throws ApiException {
        String accountId = null;
        String id = null;
        String xPhraseAppOTP = null;
        Member response = api.memberShow(accountId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Update a member
     *
     * Update user permissions in the account. Developers and translators need &lt;code&gt;project_ids&lt;/code&gt; and &lt;code&gt;locale_ids&lt;/code&gt; assigned to access them. Access token scope must include &lt;code&gt;team.manage&lt;/code&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberUpdateTest() throws ApiException {
        String accountId = null;
        String id = null;
        MemberUpdateParameters memberUpdateParameters = null;
        String xPhraseAppOTP = null;
        Member response = api.memberUpdate(accountId, id, memberUpdateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Update a member&#39;s project settings
     *
     * Update user settings in the project. Access token scope must include &lt;code&gt;team.manage&lt;/code&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberUpdateSettingsTest() throws ApiException {
        String projectId = null;
        String id = null;
        MemberUpdateSettingsParameters memberUpdateSettingsParameters = null;
        String xPhraseAppOTP = null;
        MemberProjectDetail response = api.memberUpdateSettings(projectId, id, memberUpdateSettingsParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * List members
     *
     * Get all users active in the account. It also lists resources like projects and locales the member has access to. In case nothing is shown the default access from the role is used. Access token scope must include &lt;code&gt;team.manage&lt;/code&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void membersListTest() throws ApiException {
        String accountId = null;
        String xPhraseAppOTP = null;
        Integer page = null;
        Integer perPage = null;
        List<Member> response = api.membersList(accountId, xPhraseAppOTP, page, perPage);

        // TODO: test validations
    }
    
}

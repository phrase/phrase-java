/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiException;
import com.phrase.client.model.ReleaseCreateParameters1;
import com.phrase.client.model.ReleaseTrigger;
import com.phrase.client.model.ReleaseUpdateParameters1;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReleaseTriggersApi
 */
@Ignore
public class ReleaseTriggersApiTest {

    private final ReleaseTriggersApi api = new ReleaseTriggersApi();

    
    /**
     * Create a release trigger
     *
     * Create a new recurring release. New releases will be published automatically, based on the cron schedule provided. Currently, only one release trigger can exist per distribution.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseTriggersCreateTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        ReleaseCreateParameters1 releaseCreateParameters1 = null;
        String xPhraseAppOTP = null;
        ReleaseTrigger response = api.releaseTriggersCreate(accountId, distributionId, releaseCreateParameters1, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Delete a single release trigger
     *
     * Delete a single release trigger.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseTriggersDestroyTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String id = null;
        String xPhraseAppOTP = null;
        api.releaseTriggersDestroy(accountId, distributionId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * List release triggers
     *
     * List all release triggers for the given distribution.  Note: Currently only one release trigger can exist per distribution. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseTriggersListTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String xPhraseAppOTP = null;
        List<ReleaseTrigger> response = api.releaseTriggersList(accountId, distributionId, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Get a single release trigger
     *
     * Get details of a single release trigger.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseTriggersShowTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String id = null;
        String xPhraseAppOTP = null;
        ReleaseTrigger response = api.releaseTriggersShow(accountId, distributionId, id, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Update a release trigger
     *
     * Update a recurring release.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void releaseTriggersUpdateTest() throws ApiException {
        String accountId = null;
        String distributionId = null;
        String id = null;
        ReleaseUpdateParameters1 releaseUpdateParameters1 = null;
        String xPhraseAppOTP = null;
        ReleaseTrigger response = api.releaseTriggersUpdate(accountId, distributionId, id, releaseUpdateParameters1, xPhraseAppOTP);

        // TODO: test validations
    }
    
}

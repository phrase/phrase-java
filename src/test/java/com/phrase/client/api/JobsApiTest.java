/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiException;
import com.phrase.client.model.Job;
import com.phrase.client.model.JobCompleteParameters;
import com.phrase.client.model.JobCreateParameters;
import com.phrase.client.model.JobDetails;
import com.phrase.client.model.JobKeysCreateParameters;
import com.phrase.client.model.JobReopenParameters;
import com.phrase.client.model.JobStartParameters;
import com.phrase.client.model.JobUpdateParameters;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Ignore
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    
    /**
     * Complete a job
     *
     * Mark a job as completed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobCompleteTest() throws ApiException {
        String projectId = null;
        String id = null;
        JobCompleteParameters jobCompleteParameters = null;
        String xPhraseAppOTP = null;
        JobDetails response = api.jobComplete(projectId, id, jobCompleteParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Create a job
     *
     * Create a new job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobCreateTest() throws ApiException {
        String projectId = null;
        JobCreateParameters jobCreateParameters = null;
        String xPhraseAppOTP = null;
        JobDetails response = api.jobCreate(projectId, jobCreateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Delete a job
     *
     * Delete an existing job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobDeleteTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        String branch = null;
        api.jobDelete(projectId, id, xPhraseAppOTP, branch);

        // TODO: test validations
    }
    
    /**
     * Add keys to job
     *
     * Add multiple keys to a existing job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobKeysCreateTest() throws ApiException {
        String projectId = null;
        String id = null;
        JobKeysCreateParameters jobKeysCreateParameters = null;
        String xPhraseAppOTP = null;
        JobDetails response = api.jobKeysCreate(projectId, id, jobKeysCreateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Remove keys from job
     *
     * Remove multiple keys from existing job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobKeysDeleteTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        String branch = null;
        List<String> translationKeyIds = null;
        api.jobKeysDelete(projectId, id, xPhraseAppOTP, branch, translationKeyIds);

        // TODO: test validations
    }
    
    /**
     * Lock a job
     *
     * If you are the job owner, you may lock a job using this API request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobLockTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        String branch = null;
        api.jobLock(projectId, id, xPhraseAppOTP, branch);

        // TODO: test validations
    }
    
    /**
     * Reopen a job
     *
     * Mark a job as uncompleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobReopenTest() throws ApiException {
        String projectId = null;
        String id = null;
        JobReopenParameters jobReopenParameters = null;
        String xPhraseAppOTP = null;
        JobDetails response = api.jobReopen(projectId, id, jobReopenParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Get a single job
     *
     * Get details on a single job for a given project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobShowTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        String branch = null;
        JobDetails response = api.jobShow(projectId, id, xPhraseAppOTP, branch);

        // TODO: test validations
    }
    
    /**
     * Start a job
     *
     * Starts an existing job in state draft.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobStartTest() throws ApiException {
        String projectId = null;
        String id = null;
        JobStartParameters jobStartParameters = null;
        String xPhraseAppOTP = null;
        JobDetails response = api.jobStart(projectId, id, jobStartParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * Unlock a job
     *
     * If you are the job owner, you may unlock a locked job using this API request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobUnlockTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        String branch = null;
        api.jobUnlock(projectId, id, xPhraseAppOTP, branch);

        // TODO: test validations
    }
    
    /**
     * Update a job
     *
     * Update an existing job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobUpdateTest() throws ApiException {
        String projectId = null;
        String id = null;
        JobUpdateParameters jobUpdateParameters = null;
        String xPhraseAppOTP = null;
        JobDetails response = api.jobUpdate(projectId, id, jobUpdateParameters, xPhraseAppOTP);

        // TODO: test validations
    }
    
    /**
     * List account jobs
     *
     * List all jobs for the given account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsByAccountTest() throws ApiException {
        String accountId = null;
        String xPhraseAppOTP = null;
        Integer page = null;
        Integer perPage = null;
        String ownedBy = null;
        String assignedTo = null;
        String state = null;
        List<Job> response = api.jobsByAccount(accountId, xPhraseAppOTP, page, perPage, ownedBy, assignedTo, state);

        // TODO: test validations
    }
    
    /**
     * List jobs
     *
     * List all jobs for the given project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsListTest() throws ApiException {
        String projectId = null;
        String xPhraseAppOTP = null;
        Integer page = null;
        Integer perPage = null;
        String branch = null;
        String ownedBy = null;
        String assignedTo = null;
        String state = null;
        List<Job> response = api.jobsList(projectId, xPhraseAppOTP, page, perPage, branch, ownedBy, assignedTo, state);

        // TODO: test validations
    }
    
}

/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * AutomationsCreateParameters1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-30T06:22:54.036625516Z[Etc/UTC]")
public class AutomationsCreateParameters1 {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets trigger
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    SCHEDULE("schedule"),
    
    UPLOAD("upload");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private TriggerEnum trigger;

  public static final String SERIALIZED_NAME_PROJECT_IDS = "project_ids";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS)
  private List<String> projectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_TEMPLATE_ID = "job_template_id";
  @SerializedName(SERIALIZED_NAME_JOB_TEMPLATE_ID)
  private String jobTemplateId;

  /**
   * Gets or Sets statusFilters
   */
  @JsonAdapter(StatusFiltersEnum.Adapter.class)
  public enum StatusFiltersEnum {
    UNVERIFIED("unverified"),
    
    UNTRANSLATED("untranslated"),
    
    READY_FOR_REVIEW("ready_for_review");

    private String value;

    StatusFiltersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusFiltersEnum fromValue(String value) {
      for (StatusFiltersEnum b : StatusFiltersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusFiltersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusFiltersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusFiltersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusFiltersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS_FILTERS = "status_filters";
  @SerializedName(SERIALIZED_NAME_STATUS_FILTERS)
  private List<StatusFiltersEnum> statusFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;

  public static final String SERIALIZED_NAME_CRON_SCHEDULE = "cron_schedule";
  @SerializedName(SERIALIZED_NAME_CRON_SCHEDULE)
  private String cronSchedule;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public AutomationsCreateParameters1() {
  }

  public AutomationsCreateParameters1 name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * name of the automation
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AutomationsCreateParameters1 trigger(TriggerEnum trigger) {
    
    this.trigger = trigger;
    return this;
  }

   /**
   * Get trigger
   * @return trigger
  **/
  @javax.annotation.Nonnull

  public TriggerEnum getTrigger() {
    return trigger;
  }


  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  public AutomationsCreateParameters1 projectIds(List<String> projectIds) {
    
    this.projectIds = projectIds;
    return this;
  }

  public AutomationsCreateParameters1 addProjectIdsItem(String projectIdsItem) {
    if (this.projectIds == null) {
      this.projectIds = new ArrayList<>();
    }
    this.projectIds.add(projectIdsItem);
    return this;
  }

   /**
   * List of project IDs to associate with the automation. Currently, only the first ID in the array is used. The array format leaves room for future support of multiple projects. 
   * @return projectIds
  **/
  @javax.annotation.Nonnull

  public List<String> getProjectIds() {
    return projectIds;
  }


  public void setProjectIds(List<String> projectIds) {
    this.projectIds = projectIds;
  }


  public AutomationsCreateParameters1 jobTemplateId(String jobTemplateId) {
    
    this.jobTemplateId = jobTemplateId;
    return this;
  }

   /**
   * id of job template that the automation uses to create jobs from
   * @return jobTemplateId
  **/
  @javax.annotation.Nullable

  public String getJobTemplateId() {
    return jobTemplateId;
  }


  public void setJobTemplateId(String jobTemplateId) {
    this.jobTemplateId = jobTemplateId;
  }


  public AutomationsCreateParameters1 statusFilters(List<StatusFiltersEnum> statusFilters) {
    
    this.statusFilters = statusFilters;
    return this;
  }

  public AutomationsCreateParameters1 addStatusFiltersItem(StatusFiltersEnum statusFiltersItem) {
    if (this.statusFilters == null) {
      this.statusFilters = new ArrayList<>();
    }
    this.statusFilters.add(statusFiltersItem);
    return this;
  }

   /**
   * translation key statuses used to filter keys that are added to jobs
   * @return statusFilters
  **/
  @javax.annotation.Nonnull

  public List<StatusFiltersEnum> getStatusFilters() {
    return statusFilters;
  }


  public void setStatusFilters(List<StatusFiltersEnum> statusFilters) {
    this.statusFilters = statusFilters;
  }


  public AutomationsCreateParameters1 tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public AutomationsCreateParameters1 addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * used to filter which keys are added to jobs
   * @return tags
  **/
  @javax.annotation.Nullable

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public AutomationsCreateParameters1 cronSchedule(String cronSchedule) {
    
    this.cronSchedule = cronSchedule;
    return this;
  }

   /**
   * along with time_zone, specifies when the scheduled automation is supposed to run
   * @return cronSchedule
  **/
  @javax.annotation.Nullable

  public String getCronSchedule() {
    return cronSchedule;
  }


  public void setCronSchedule(String cronSchedule) {
    this.cronSchedule = cronSchedule;
  }


  public AutomationsCreateParameters1 timeZone(String timeZone) {
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * along with cron_schedule, specifies when the scheduled automation is supposed to run
   * @return timeZone
  **/
  @javax.annotation.Nullable

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationsCreateParameters1 automationsCreateParameters1 = (AutomationsCreateParameters1) o;
    return Objects.equals(this.name, automationsCreateParameters1.name) &&
        Objects.equals(this.trigger, automationsCreateParameters1.trigger) &&
        Objects.equals(this.projectIds, automationsCreateParameters1.projectIds) &&
        Objects.equals(this.jobTemplateId, automationsCreateParameters1.jobTemplateId) &&
        Objects.equals(this.statusFilters, automationsCreateParameters1.statusFilters) &&
        Objects.equals(this.tags, automationsCreateParameters1.tags) &&
        Objects.equals(this.cronSchedule, automationsCreateParameters1.cronSchedule) &&
        Objects.equals(this.timeZone, automationsCreateParameters1.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, trigger, projectIds, jobTemplateId, statusFilters, tags, cronSchedule, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationsCreateParameters1 {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    jobTemplateId: ").append(toIndentedString(jobTemplateId)).append("\n");
    sb.append("    statusFilters: ").append(toIndentedString(statusFilters)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    cronSchedule: ").append(toIndentedString(cronSchedule)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


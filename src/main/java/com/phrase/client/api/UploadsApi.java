/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiCallback;
import com.phrase.client.ApiClient;
import com.phrase.client.ApiException;
import com.phrase.client.ApiResponse;
import com.phrase.client.Configuration;
import com.phrase.client.Pair;
import com.phrase.client.ProgressRequestBody;
import com.phrase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.phrase.client.model.Upload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UploadsApi {
    private ApiClient localVarApiClient;

    public UploadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for uploadCreate
     * @param projectId Project ID (required)
     * @param _file File to be imported (required)
     * @param fileFormat File format. Auto-detected when possible and not specified. (required)
     * @param localeId Locale of the file&#39;s content. Can be the name or id of the locale. Preferred is id. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @param tags List of tags separated by comma to be associated with the new keys contained in the upload. (optional)
     * @param updateTranslations Indicates whether existing translations should be updated with the file content. (optional)
     * @param updateTranslationKeys Pass &#x60;false&#x60; here to prevent new keys from being created and existing keys updated. (optional, default to true)
     * @param updateTranslationsOnSourceMatch Update target translations only if the source translations of the uploaded multilingual file match the stored translations. (optional, default to false)
     * @param updateDescriptions Existing key descriptions will be updated with the file content. Empty descriptions overwrite existing descriptions. (optional)
     * @param convertEmoji This option is obsolete. Providing the option will cause a bad request error. (optional)
     * @param skipUploadTags Indicates whether the upload should not create upload tags. (optional)
     * @param skipUnverification Indicates whether the upload should unverify updated translations. (optional)
     * @param fileEncoding Enforces a specific encoding on the file contents. Valid options are \\\&quot;UTF-8\\\&quot;, \\\&quot;UTF-16\\\&quot; and \\\&quot;ISO-8859-1\\\&quot;. (optional)
     * @param localeMapping Mapping between locale names and translation columns. Required in some formats like CSV or XLSX. (optional)
     * @param formatOptions Additional options available for specific formats. See our format guide for the [complete list](https://support.phrase.com/hc/en-us/articles/9652464547740-List-of-Supported-File-Types-Strings). (optional)
     * @param autotranslate If set, translations for the uploaded language will be fetched automatically. (optional)
     * @param verifyMentionedTranslations Indicates whether all translations mentioned in the upload should be verified. (optional, default to false)
     * @param markReviewed Indicated whether the imported translations should be marked as reviewed. This setting is available if the review workflow is enabled for the project. (optional)
     * @param tagOnlyAffectedKeys Indicates whether only keys affected (created or updated) by the upload should be tagged. The default is &#x60;false&#x60; (optional, default to false)
     * @param translationKeyPrefix This prefix will be added to all uploaded translation key names to prevent collisions. Use a meaningful prefix related to your project or file to keep key names organized. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCreateCall(String projectId, File _file, String fileFormat, String localeId, String xPhraseAppOTP, String branch, String tags, Boolean updateTranslations, Boolean updateTranslationKeys, Boolean updateTranslationsOnSourceMatch, Boolean updateDescriptions, Boolean convertEmoji, Boolean skipUploadTags, Boolean skipUnverification, String fileEncoding, Object localeMapping, Object formatOptions, Boolean autotranslate, Boolean verifyMentionedTranslations, Boolean markReviewed, Boolean tagOnlyAffectedKeys, String translationKeyPrefix, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/uploads"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPhraseAppOTP != null) {
            localVarHeaderParams.put("X-PhraseApp-OTP", localVarApiClient.parameterToString(xPhraseAppOTP));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (branch != null) {
            localVarFormParams.put("branch", branch);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fileFormat != null) {
            localVarFormParams.put("file_format", fileFormat);
        }

        if (localeId != null) {
            localVarFormParams.put("locale_id", localeId);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (updateTranslations != null) {
            localVarFormParams.put("update_translations", updateTranslations);
        }

        if (updateTranslationKeys != null) {
            localVarFormParams.put("update_translation_keys", updateTranslationKeys);
        }

        if (updateTranslationsOnSourceMatch != null) {
            localVarFormParams.put("update_translations_on_source_match", updateTranslationsOnSourceMatch);
        }

        if (updateDescriptions != null) {
            localVarFormParams.put("update_descriptions", updateDescriptions);
        }

        if (convertEmoji != null) {
            localVarFormParams.put("convert_emoji", convertEmoji);
        }

        if (skipUploadTags != null) {
            localVarFormParams.put("skip_upload_tags", skipUploadTags);
        }

        if (skipUnverification != null) {
            localVarFormParams.put("skip_unverification", skipUnverification);
        }

        if (fileEncoding != null) {
            localVarFormParams.put("file_encoding", fileEncoding);
        }

        if (localeMapping != null) {
            localVarFormParams.put("locale_mapping", localeMapping);
        }

        if (formatOptions != null) {
            localVarFormParams.put("format_options", formatOptions);
        }

        if (autotranslate != null) {
            localVarFormParams.put("autotranslate", autotranslate);
        }

        if (verifyMentionedTranslations != null) {
            localVarFormParams.put("verify_mentioned_translations", verifyMentionedTranslations);
        }

        if (markReviewed != null) {
            localVarFormParams.put("mark_reviewed", markReviewed);
        }

        if (tagOnlyAffectedKeys != null) {
            localVarFormParams.put("tag_only_affected_keys", tagOnlyAffectedKeys);
        }

        if (translationKeyPrefix != null) {
            localVarFormParams.put("translation_key_prefix", translationKeyPrefix);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic", "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadCreateValidateBeforeCall(String projectId, File _file, String fileFormat, String localeId, String xPhraseAppOTP, String branch, String tags, Boolean updateTranslations, Boolean updateTranslationKeys, Boolean updateTranslationsOnSourceMatch, Boolean updateDescriptions, Boolean convertEmoji, Boolean skipUploadTags, Boolean skipUnverification, String fileEncoding, Object localeMapping, Object formatOptions, Boolean autotranslate, Boolean verifyMentionedTranslations, Boolean markReviewed, Boolean tagOnlyAffectedKeys, String translationKeyPrefix, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling uploadCreate(Async)");
        }
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadCreate(Async)");
        }
        
        // verify the required parameter 'fileFormat' is set
        if (fileFormat == null) {
            throw new ApiException("Missing the required parameter 'fileFormat' when calling uploadCreate(Async)");
        }
        
        // verify the required parameter 'localeId' is set
        if (localeId == null) {
            throw new ApiException("Missing the required parameter 'localeId' when calling uploadCreate(Async)");
        }
        

        okhttp3.Call localVarCall = uploadCreateCall(projectId, _file, fileFormat, localeId, xPhraseAppOTP, branch, tags, updateTranslations, updateTranslationKeys, updateTranslationsOnSourceMatch, updateDescriptions, convertEmoji, skipUploadTags, skipUnverification, fileEncoding, localeMapping, formatOptions, autotranslate, verifyMentionedTranslations, markReviewed, tagOnlyAffectedKeys, translationKeyPrefix, _callback);
        return localVarCall;

    }

    /**
     * Upload a new file
     * Upload a new language file. Creates necessary resources in your project.
     * @param projectId Project ID (required)
     * @param _file File to be imported (required)
     * @param fileFormat File format. Auto-detected when possible and not specified. (required)
     * @param localeId Locale of the file&#39;s content. Can be the name or id of the locale. Preferred is id. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @param tags List of tags separated by comma to be associated with the new keys contained in the upload. (optional)
     * @param updateTranslations Indicates whether existing translations should be updated with the file content. (optional)
     * @param updateTranslationKeys Pass &#x60;false&#x60; here to prevent new keys from being created and existing keys updated. (optional, default to true)
     * @param updateTranslationsOnSourceMatch Update target translations only if the source translations of the uploaded multilingual file match the stored translations. (optional, default to false)
     * @param updateDescriptions Existing key descriptions will be updated with the file content. Empty descriptions overwrite existing descriptions. (optional)
     * @param convertEmoji This option is obsolete. Providing the option will cause a bad request error. (optional)
     * @param skipUploadTags Indicates whether the upload should not create upload tags. (optional)
     * @param skipUnverification Indicates whether the upload should unverify updated translations. (optional)
     * @param fileEncoding Enforces a specific encoding on the file contents. Valid options are \\\&quot;UTF-8\\\&quot;, \\\&quot;UTF-16\\\&quot; and \\\&quot;ISO-8859-1\\\&quot;. (optional)
     * @param localeMapping Mapping between locale names and translation columns. Required in some formats like CSV or XLSX. (optional)
     * @param formatOptions Additional options available for specific formats. See our format guide for the [complete list](https://support.phrase.com/hc/en-us/articles/9652464547740-List-of-Supported-File-Types-Strings). (optional)
     * @param autotranslate If set, translations for the uploaded language will be fetched automatically. (optional)
     * @param verifyMentionedTranslations Indicates whether all translations mentioned in the upload should be verified. (optional, default to false)
     * @param markReviewed Indicated whether the imported translations should be marked as reviewed. This setting is available if the review workflow is enabled for the project. (optional)
     * @param tagOnlyAffectedKeys Indicates whether only keys affected (created or updated) by the upload should be tagged. The default is &#x60;false&#x60; (optional, default to false)
     * @param translationKeyPrefix This prefix will be added to all uploaded translation key names to prevent collisions. Use a meaningful prefix related to your project or file to keep key names organized. (optional)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public Upload uploadCreate(String projectId, File _file, String fileFormat, String localeId, String xPhraseAppOTP, String branch, String tags, Boolean updateTranslations, Boolean updateTranslationKeys, Boolean updateTranslationsOnSourceMatch, Boolean updateDescriptions, Boolean convertEmoji, Boolean skipUploadTags, Boolean skipUnverification, String fileEncoding, Object localeMapping, Object formatOptions, Boolean autotranslate, Boolean verifyMentionedTranslations, Boolean markReviewed, Boolean tagOnlyAffectedKeys, String translationKeyPrefix) throws ApiException {
        ApiResponse<Upload> localVarResp = uploadCreateWithHttpInfo(projectId, _file, fileFormat, localeId, xPhraseAppOTP, branch, tags, updateTranslations, updateTranslationKeys, updateTranslationsOnSourceMatch, updateDescriptions, convertEmoji, skipUploadTags, skipUnverification, fileEncoding, localeMapping, formatOptions, autotranslate, verifyMentionedTranslations, markReviewed, tagOnlyAffectedKeys, translationKeyPrefix);
        return localVarResp.getData();
    }

    /**
     * Upload a new file
     * Upload a new language file. Creates necessary resources in your project.
     * @param projectId Project ID (required)
     * @param _file File to be imported (required)
     * @param fileFormat File format. Auto-detected when possible and not specified. (required)
     * @param localeId Locale of the file&#39;s content. Can be the name or id of the locale. Preferred is id. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @param tags List of tags separated by comma to be associated with the new keys contained in the upload. (optional)
     * @param updateTranslations Indicates whether existing translations should be updated with the file content. (optional)
     * @param updateTranslationKeys Pass &#x60;false&#x60; here to prevent new keys from being created and existing keys updated. (optional, default to true)
     * @param updateTranslationsOnSourceMatch Update target translations only if the source translations of the uploaded multilingual file match the stored translations. (optional, default to false)
     * @param updateDescriptions Existing key descriptions will be updated with the file content. Empty descriptions overwrite existing descriptions. (optional)
     * @param convertEmoji This option is obsolete. Providing the option will cause a bad request error. (optional)
     * @param skipUploadTags Indicates whether the upload should not create upload tags. (optional)
     * @param skipUnverification Indicates whether the upload should unverify updated translations. (optional)
     * @param fileEncoding Enforces a specific encoding on the file contents. Valid options are \\\&quot;UTF-8\\\&quot;, \\\&quot;UTF-16\\\&quot; and \\\&quot;ISO-8859-1\\\&quot;. (optional)
     * @param localeMapping Mapping between locale names and translation columns. Required in some formats like CSV or XLSX. (optional)
     * @param formatOptions Additional options available for specific formats. See our format guide for the [complete list](https://support.phrase.com/hc/en-us/articles/9652464547740-List-of-Supported-File-Types-Strings). (optional)
     * @param autotranslate If set, translations for the uploaded language will be fetched automatically. (optional)
     * @param verifyMentionedTranslations Indicates whether all translations mentioned in the upload should be verified. (optional, default to false)
     * @param markReviewed Indicated whether the imported translations should be marked as reviewed. This setting is available if the review workflow is enabled for the project. (optional)
     * @param tagOnlyAffectedKeys Indicates whether only keys affected (created or updated) by the upload should be tagged. The default is &#x60;false&#x60; (optional, default to false)
     * @param translationKeyPrefix This prefix will be added to all uploaded translation key names to prevent collisions. Use a meaningful prefix related to your project or file to keep key names organized. (optional)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Upload> uploadCreateWithHttpInfo(String projectId, File _file, String fileFormat, String localeId, String xPhraseAppOTP, String branch, String tags, Boolean updateTranslations, Boolean updateTranslationKeys, Boolean updateTranslationsOnSourceMatch, Boolean updateDescriptions, Boolean convertEmoji, Boolean skipUploadTags, Boolean skipUnverification, String fileEncoding, Object localeMapping, Object formatOptions, Boolean autotranslate, Boolean verifyMentionedTranslations, Boolean markReviewed, Boolean tagOnlyAffectedKeys, String translationKeyPrefix) throws ApiException {
        okhttp3.Call localVarCall = uploadCreateValidateBeforeCall(projectId, _file, fileFormat, localeId, xPhraseAppOTP, branch, tags, updateTranslations, updateTranslationKeys, updateTranslationsOnSourceMatch, updateDescriptions, convertEmoji, skipUploadTags, skipUnverification, fileEncoding, localeMapping, formatOptions, autotranslate, verifyMentionedTranslations, markReviewed, tagOnlyAffectedKeys, translationKeyPrefix, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a new file (asynchronously)
     * Upload a new language file. Creates necessary resources in your project.
     * @param projectId Project ID (required)
     * @param _file File to be imported (required)
     * @param fileFormat File format. Auto-detected when possible and not specified. (required)
     * @param localeId Locale of the file&#39;s content. Can be the name or id of the locale. Preferred is id. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @param tags List of tags separated by comma to be associated with the new keys contained in the upload. (optional)
     * @param updateTranslations Indicates whether existing translations should be updated with the file content. (optional)
     * @param updateTranslationKeys Pass &#x60;false&#x60; here to prevent new keys from being created and existing keys updated. (optional, default to true)
     * @param updateTranslationsOnSourceMatch Update target translations only if the source translations of the uploaded multilingual file match the stored translations. (optional, default to false)
     * @param updateDescriptions Existing key descriptions will be updated with the file content. Empty descriptions overwrite existing descriptions. (optional)
     * @param convertEmoji This option is obsolete. Providing the option will cause a bad request error. (optional)
     * @param skipUploadTags Indicates whether the upload should not create upload tags. (optional)
     * @param skipUnverification Indicates whether the upload should unverify updated translations. (optional)
     * @param fileEncoding Enforces a specific encoding on the file contents. Valid options are \\\&quot;UTF-8\\\&quot;, \\\&quot;UTF-16\\\&quot; and \\\&quot;ISO-8859-1\\\&quot;. (optional)
     * @param localeMapping Mapping between locale names and translation columns. Required in some formats like CSV or XLSX. (optional)
     * @param formatOptions Additional options available for specific formats. See our format guide for the [complete list](https://support.phrase.com/hc/en-us/articles/9652464547740-List-of-Supported-File-Types-Strings). (optional)
     * @param autotranslate If set, translations for the uploaded language will be fetched automatically. (optional)
     * @param verifyMentionedTranslations Indicates whether all translations mentioned in the upload should be verified. (optional, default to false)
     * @param markReviewed Indicated whether the imported translations should be marked as reviewed. This setting is available if the review workflow is enabled for the project. (optional)
     * @param tagOnlyAffectedKeys Indicates whether only keys affected (created or updated) by the upload should be tagged. The default is &#x60;false&#x60; (optional, default to false)
     * @param translationKeyPrefix This prefix will be added to all uploaded translation key names to prevent collisions. Use a meaningful prefix related to your project or file to keep key names organized. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCreateAsync(String projectId, File _file, String fileFormat, String localeId, String xPhraseAppOTP, String branch, String tags, Boolean updateTranslations, Boolean updateTranslationKeys, Boolean updateTranslationsOnSourceMatch, Boolean updateDescriptions, Boolean convertEmoji, Boolean skipUploadTags, Boolean skipUnverification, String fileEncoding, Object localeMapping, Object formatOptions, Boolean autotranslate, Boolean verifyMentionedTranslations, Boolean markReviewed, Boolean tagOnlyAffectedKeys, String translationKeyPrefix, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadCreateValidateBeforeCall(projectId, _file, fileFormat, localeId, xPhraseAppOTP, branch, tags, updateTranslations, updateTranslationKeys, updateTranslationsOnSourceMatch, updateDescriptions, convertEmoji, skipUploadTags, skipUnverification, fileEncoding, localeMapping, formatOptions, autotranslate, verifyMentionedTranslations, markReviewed, tagOnlyAffectedKeys, translationKeyPrefix, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadShow
     * @param projectId Project ID (required)
     * @param id ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call uploadShowCall(String projectId, String id, String xPhraseAppOTP, String branch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/uploads/{id}"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPhraseAppOTP != null) {
            localVarHeaderParams.put("X-PhraseApp-OTP", localVarApiClient.parameterToString(xPhraseAppOTP));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic", "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadShowValidateBeforeCall(String projectId, String id, String xPhraseAppOTP, String branch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling uploadShow(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadShow(Async)");
        }
        

        okhttp3.Call localVarCall = uploadShowCall(projectId, id, xPhraseAppOTP, branch, _callback);
        return localVarCall;

    }

    /**
     * Get a single upload
     * View details and summary for a single upload.
     * @param projectId Project ID (required)
     * @param id ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public Upload uploadShow(String projectId, String id, String xPhraseAppOTP, String branch) throws ApiException {
        ApiResponse<Upload> localVarResp = uploadShowWithHttpInfo(projectId, id, xPhraseAppOTP, branch);
        return localVarResp.getData();
    }

    /**
     * Get a single upload
     * View details and summary for a single upload.
     * @param projectId Project ID (required)
     * @param id ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Upload> uploadShowWithHttpInfo(String projectId, String id, String xPhraseAppOTP, String branch) throws ApiException {
        okhttp3.Call localVarCall = uploadShowValidateBeforeCall(projectId, id, xPhraseAppOTP, branch, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single upload (asynchronously)
     * View details and summary for a single upload.
     * @param projectId Project ID (required)
     * @param id ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param branch specify the branch to use (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call uploadShowAsync(String projectId, String id, String xPhraseAppOTP, String branch, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadShowValidateBeforeCall(projectId, id, xPhraseAppOTP, branch, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadsList
     * @param projectId Project ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param page Page number (optional)
     * @param perPage Limit on the number of objects to be returned, between 1 and 100. 25 by default (optional)
     * @param branch specify the branch to use (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  * Link -  <br>  * Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call uploadsListCall(String projectId, String xPhraseAppOTP, Integer page, Integer perPage, String branch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/uploads"
            .replaceAll("\\{" + "project_id" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPhraseAppOTP != null) {
            localVarHeaderParams.put("X-PhraseApp-OTP", localVarApiClient.parameterToString(xPhraseAppOTP));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic", "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadsListValidateBeforeCall(String projectId, String xPhraseAppOTP, Integer page, Integer perPage, String branch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling uploadsList(Async)");
        }
        

        okhttp3.Call localVarCall = uploadsListCall(projectId, xPhraseAppOTP, page, perPage, branch, _callback);
        return localVarCall;

    }

    /**
     * List uploads
     * List all uploads for the given project.
     * @param projectId Project ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param page Page number (optional)
     * @param perPage Limit on the number of objects to be returned, between 1 and 100. 25 by default (optional)
     * @param branch specify the branch to use (optional)
     * @return List&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  * Link -  <br>  * Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public List<Upload> uploadsList(String projectId, String xPhraseAppOTP, Integer page, Integer perPage, String branch) throws ApiException {
        ApiResponse<List<Upload>> localVarResp = uploadsListWithHttpInfo(projectId, xPhraseAppOTP, page, perPage, branch);
        return localVarResp.getData();
    }

    /**
     * List uploads
     * List all uploads for the given project.
     * @param projectId Project ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param page Page number (optional)
     * @param perPage Limit on the number of objects to be returned, between 1 and 100. 25 by default (optional)
     * @param branch specify the branch to use (optional)
     * @return ApiResponse&lt;List&lt;Upload&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  * Link -  <br>  * Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Upload>> uploadsListWithHttpInfo(String projectId, String xPhraseAppOTP, Integer page, Integer perPage, String branch) throws ApiException {
        okhttp3.Call localVarCall = uploadsListValidateBeforeCall(projectId, xPhraseAppOTP, page, perPage, branch, null);
        Type localVarReturnType = new TypeToken<List<Upload>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List uploads (asynchronously)
     * List all uploads for the given project.
     * @param projectId Project ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param page Page number (optional)
     * @param perPage Limit on the number of objects to be returned, between 1 and 100. 25 by default (optional)
     * @param branch specify the branch to use (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  * Link -  <br>  * Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
        <tr><td> 429 </td><td> Rate Limiting </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call uploadsListAsync(String projectId, String xPhraseAppOTP, Integer page, Integer perPage, String branch, final ApiCallback<List<Upload>> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadsListValidateBeforeCall(projectId, xPhraseAppOTP, page, perPage, branch, _callback);
        Type localVarReturnType = new TypeToken<List<Upload>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiCallback;
import com.phrase.client.ApiClient;
import com.phrase.client.ApiException;
import com.phrase.client.ApiResponse;
import com.phrase.client.Configuration;
import com.phrase.client.Pair;
import com.phrase.client.ProgressRequestBody;
import com.phrase.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.phrase.client.model.CustomMetadataPropertyCreate422Response;
import com.phrase.client.model.KeyLink;
import com.phrase.client.model.KeyLinksBatchDestroyParameters;
import com.phrase.client.model.KeyLinksCreateParameters;
import com.phrase.client.model.KeyLinksIndex400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinkedKeysApi {
    private ApiClient localVarApiClient;

    public LinkedKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinkedKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for keyLinksBatchDestroy
     * @param accountId Account ID (required)
     * @param keyLinksBatchDestroyParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param unlinkParent Whether to unlink the parent key as well and unmark it as linked-key. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksBatchDestroyCall(String accountId, KeyLinksBatchDestroyParameters keyLinksBatchDestroyParameters, String xPhraseAppOTP, Boolean unlinkParent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = keyLinksBatchDestroyParameters;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/keys/{id}/key_links"
            .replaceAll("\\{" + "account_id" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (unlinkParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unlink_parent", unlinkParent));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPhraseAppOTP != null) {
            localVarHeaderParams.put("X-PhraseApp-OTP", localVarApiClient.parameterToString(xPhraseAppOTP));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic", "Token" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyLinksBatchDestroyValidateBeforeCall(String accountId, KeyLinksBatchDestroyParameters keyLinksBatchDestroyParameters, String xPhraseAppOTP, Boolean unlinkParent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling keyLinksBatchDestroy(Async)");
        }
        
        // verify the required parameter 'keyLinksBatchDestroyParameters' is set
        if (keyLinksBatchDestroyParameters == null) {
            throw new ApiException("Missing the required parameter 'keyLinksBatchDestroyParameters' when calling keyLinksBatchDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = keyLinksBatchDestroyCall(accountId, keyLinksBatchDestroyParameters, xPhraseAppOTP, unlinkParent, _callback);
        return localVarCall;

    }

    /**
     * Batch unlink child keys from a parent key
     * Unlinks multiple child keys from a given parent key in a single operation.
     * @param accountId Account ID (required)
     * @param keyLinksBatchDestroyParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param unlinkParent Whether to unlink the parent key as well and unmark it as linked-key. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public void keyLinksBatchDestroy(String accountId, KeyLinksBatchDestroyParameters keyLinksBatchDestroyParameters, String xPhraseAppOTP, Boolean unlinkParent) throws ApiException {
        keyLinksBatchDestroyWithHttpInfo(accountId, keyLinksBatchDestroyParameters, xPhraseAppOTP, unlinkParent);
    }

    /**
     * Batch unlink child keys from a parent key
     * Unlinks multiple child keys from a given parent key in a single operation.
     * @param accountId Account ID (required)
     * @param keyLinksBatchDestroyParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param unlinkParent Whether to unlink the parent key as well and unmark it as linked-key. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> keyLinksBatchDestroyWithHttpInfo(String accountId, KeyLinksBatchDestroyParameters keyLinksBatchDestroyParameters, String xPhraseAppOTP, Boolean unlinkParent) throws ApiException {
        okhttp3.Call localVarCall = keyLinksBatchDestroyValidateBeforeCall(accountId, keyLinksBatchDestroyParameters, xPhraseAppOTP, unlinkParent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Batch unlink child keys from a parent key (asynchronously)
     * Unlinks multiple child keys from a given parent key in a single operation.
     * @param accountId Account ID (required)
     * @param keyLinksBatchDestroyParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param unlinkParent Whether to unlink the parent key as well and unmark it as linked-key. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksBatchDestroyAsync(String accountId, KeyLinksBatchDestroyParameters keyLinksBatchDestroyParameters, String xPhraseAppOTP, Boolean unlinkParent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyLinksBatchDestroyValidateBeforeCall(accountId, keyLinksBatchDestroyParameters, xPhraseAppOTP, unlinkParent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyLinksCreate
     * @param accountId Account ID (required)
     * @param keyLinksCreateParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksCreateCall(String accountId, KeyLinksCreateParameters keyLinksCreateParameters, String xPhraseAppOTP, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = keyLinksCreateParameters;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/keys/{id}/key_links"
            .replaceAll("\\{" + "account_id" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPhraseAppOTP != null) {
            localVarHeaderParams.put("X-PhraseApp-OTP", localVarApiClient.parameterToString(xPhraseAppOTP));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic", "Token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyLinksCreateValidateBeforeCall(String accountId, KeyLinksCreateParameters keyLinksCreateParameters, String xPhraseAppOTP, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling keyLinksCreate(Async)");
        }
        
        // verify the required parameter 'keyLinksCreateParameters' is set
        if (keyLinksCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'keyLinksCreateParameters' when calling keyLinksCreate(Async)");
        }
        

        okhttp3.Call localVarCall = keyLinksCreateCall(accountId, keyLinksCreateParameters, xPhraseAppOTP, _callback);
        return localVarCall;

    }

    /**
     * Link child keys to a parent key
     * Creates links between a given parent key and one or more child keys.
     * @param accountId Account ID (required)
     * @param keyLinksCreateParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @return KeyLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public KeyLink keyLinksCreate(String accountId, KeyLinksCreateParameters keyLinksCreateParameters, String xPhraseAppOTP) throws ApiException {
        ApiResponse<KeyLink> localVarResp = keyLinksCreateWithHttpInfo(accountId, keyLinksCreateParameters, xPhraseAppOTP);
        return localVarResp.getData();
    }

    /**
     * Link child keys to a parent key
     * Creates links between a given parent key and one or more child keys.
     * @param accountId Account ID (required)
     * @param keyLinksCreateParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @return ApiResponse&lt;KeyLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<KeyLink> keyLinksCreateWithHttpInfo(String accountId, KeyLinksCreateParameters keyLinksCreateParameters, String xPhraseAppOTP) throws ApiException {
        okhttp3.Call localVarCall = keyLinksCreateValidateBeforeCall(accountId, keyLinksCreateParameters, xPhraseAppOTP, null);
        Type localVarReturnType = new TypeToken<KeyLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link child keys to a parent key (asynchronously)
     * Creates links between a given parent key and one or more child keys.
     * @param accountId Account ID (required)
     * @param keyLinksCreateParameters  (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksCreateAsync(String accountId, KeyLinksCreateParameters keyLinksCreateParameters, String xPhraseAppOTP, final ApiCallback<KeyLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyLinksCreateValidateBeforeCall(accountId, keyLinksCreateParameters, xPhraseAppOTP, _callback);
        Type localVarReturnType = new TypeToken<KeyLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyLinksDestroy
     * @param accountId Account ID (required)
     * @param childKeyId The ID of the child key to unlink. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksDestroyCall(String accountId, String childKeyId, String xPhraseAppOTP, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/keys/{id}/key_links/{child_key_id}"
            .replaceAll("\\{" + "account_id" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "child_key_id" + "\\}", localVarApiClient.escapeString(childKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPhraseAppOTP != null) {
            localVarHeaderParams.put("X-PhraseApp-OTP", localVarApiClient.parameterToString(xPhraseAppOTP));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic", "Token" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyLinksDestroyValidateBeforeCall(String accountId, String childKeyId, String xPhraseAppOTP, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling keyLinksDestroy(Async)");
        }
        
        // verify the required parameter 'childKeyId' is set
        if (childKeyId == null) {
            throw new ApiException("Missing the required parameter 'childKeyId' when calling keyLinksDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = keyLinksDestroyCall(accountId, childKeyId, xPhraseAppOTP, _callback);
        return localVarCall;

    }

    /**
     * Unlink a child key from a parent key
     * Unlinks a single child key from a given parent key.
     * @param accountId Account ID (required)
     * @param childKeyId The ID of the child key to unlink. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public void keyLinksDestroy(String accountId, String childKeyId, String xPhraseAppOTP) throws ApiException {
        keyLinksDestroyWithHttpInfo(accountId, childKeyId, xPhraseAppOTP);
    }

    /**
     * Unlink a child key from a parent key
     * Unlinks a single child key from a given parent key.
     * @param accountId Account ID (required)
     * @param childKeyId The ID of the child key to unlink. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> keyLinksDestroyWithHttpInfo(String accountId, String childKeyId, String xPhraseAppOTP) throws ApiException {
        okhttp3.Call localVarCall = keyLinksDestroyValidateBeforeCall(accountId, childKeyId, xPhraseAppOTP, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlink a child key from a parent key (asynchronously)
     * Unlinks a single child key from a given parent key.
     * @param accountId Account ID (required)
     * @param childKeyId The ID of the child key to unlink. (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  * X-Rate-Limit-Limit -  <br>  * X-Rate-Limit-Remaining -  <br>  * X-Rate-Limit-Reset -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksDestroyAsync(String accountId, String childKeyId, String xPhraseAppOTP, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyLinksDestroyValidateBeforeCall(accountId, childKeyId, xPhraseAppOTP, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyLinksIndex
     * @param accountId Account ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksIndexCall(String accountId, String xPhraseAppOTP, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/keys/{id}/key_links"
            .replaceAll("\\{" + "account_id" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPhraseAppOTP != null) {
            localVarHeaderParams.put("X-PhraseApp-OTP", localVarApiClient.parameterToString(xPhraseAppOTP));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic", "Token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyLinksIndexValidateBeforeCall(String accountId, String xPhraseAppOTP, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling keyLinksIndex(Async)");
        }
        

        okhttp3.Call localVarCall = keyLinksIndexCall(accountId, xPhraseAppOTP, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all child keys linked to a specific parent key
     * Returns detailed information about a parent key, including its linked child keys.
     * @param accountId Account ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @return KeyLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public KeyLink keyLinksIndex(String accountId, String xPhraseAppOTP) throws ApiException {
        ApiResponse<KeyLink> localVarResp = keyLinksIndexWithHttpInfo(accountId, xPhraseAppOTP);
        return localVarResp.getData();
    }

    /**
     * Retrieve all child keys linked to a specific parent key
     * Returns detailed information about a parent key, including its linked child keys.
     * @param accountId Account ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @return ApiResponse&lt;KeyLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyLink> keyLinksIndexWithHttpInfo(String accountId, String xPhraseAppOTP) throws ApiException {
        okhttp3.Call localVarCall = keyLinksIndexValidateBeforeCall(accountId, xPhraseAppOTP, null);
        Type localVarReturnType = new TypeToken<KeyLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all child keys linked to a specific parent key (asynchronously)
     * Returns detailed information about a parent key, including its linked child keys.
     * @param accountId Account ID (required)
     * @param xPhraseAppOTP Two-Factor-Authentication token (optional) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyLinksIndexAsync(String accountId, String xPhraseAppOTP, final ApiCallback<KeyLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyLinksIndexValidateBeforeCall(accountId, xPhraseAppOTP, _callback);
        Type localVarReturnType = new TypeToken<KeyLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

buildscript {
    repositories {
        maven { url "https://repo1.maven.org/maven2" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id 'idea'
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

group = 'com.phrase'
version = '1.19.2'

java {
    withSourcesJar()
    withJavadocJar()
}
repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs = ['src/main/java']
}

if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided 'javax.annotation:javax.annotation-api:1.3.2'
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    // apply plugin: 'java'
    // apply plugin: 'maven'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // install {
    //     repositories.mavenInstaller {
    //         pom.artifactId = 'phrase-java'
    //     }
    // }

    task execute(type:JavaExec) {
       mainClass = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.swagger:swagger-annotations:1.5.24'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:3.14.7'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.7'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.gsonfire:gson-fire:1.8.4'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.14.7'
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

signing {
    useGpgCmd()
    sign(publishing.publications)
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java

            pom {
                name.set("phrase-java")
                description.set("Java Client for Phrase Strings API")
                url.set("https://developers.phrase.com")
                licenses {
                    license {
                        name.set("MIT")
                        url.set("https://choosealicense.com/licenses/mit/")
                    }
                }
                developers {
                    developer {
                        id.set("Phrase")
                        name.set("Phrase")
                        email.set("support@phrase.com")
                    }
                }
                scm {
                    connection.set("scm:git:git@github.com:phrase/openapi.git")
                    developerConnection.set("scm:git:git@github.com:phrase/openapi.git")
                    url.set("https://github.com/phrase/openapi")
                }
            }

        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/phrase/phrase-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("OSSRH_USER")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}
